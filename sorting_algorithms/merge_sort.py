def merge_sort(arr):\n    """\n    Merge Sort implementation\n    Time Complexity: O(n log n)\n    Space Complexity: O(n)\n    """\n    if len(arr) <= 1:\n        return arr\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    # Merge the two halves\n    return merge(left, right)\n\ndef merge(left, right):\n    """Helper function to merge two sorted arrays"""\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    # Add remaining elements\n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\n# Example usage\nif name == "main":\n    # Test the merge sort\n    test_array = [64, 34, 25, 12, 22, 11, 90]\n    print("Original array:", test_array)\n    sorted_array = merge_sort(test_array)\n    print("Sorted array:", sorted_array)