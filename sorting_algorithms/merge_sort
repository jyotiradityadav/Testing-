def merge_sort(arr):
    """
    Sorts a list using the Merge Sort algorithm.
    
    Args:
        arr (list): The list to be sorted.
    
    Returns:
        list: A new sorted list.
    """
    if len(arr) <= 1:
        return arr
        
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    return merge(left, right)

def merge(left, right):
    """
    Merges two sorted lists into a single sorted list.
    
    Args:
        left (list): The first sorted list.
        right (list): The second sorted list.
    
    Returns:
        list: A merged sorted list.
    """
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            
    result.extend(left[i:])
    result.extend(right[j:])
    return result

# Test suite
def test_merge_sort():
    """
    Test function for merge_sort with various test cases.
    """
    # Test case 1: Empty list
    assert merge_sort([]) == [], "Test case 1 failed: Empty list"
    
    # Test case 2: Single element
    assert merge_sort([1]) == [1], "Test case 2 failed: Single element"
    
    # Test case 3: Already sorted list
    assert merge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], "Test case 3 failed: Already sorted list"
    
    # Test case 4: Reverse sorted list
    assert merge_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], "Test case 4 failed: Reverse sorted list"
    
    # Test case 5: List with duplicates
    assert merge_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9], "Test case 5 failed: List with duplicates"
    
    # Test case 6: All elements same
    assert merge_sort([2, 2, 2, 2]) == [2, 2, 2, 2], "Test case 6 failed: All elements same"
    
    print("All test cases passed!")

if __name__ == "__main__":
    test_merge_sort()
    # Example usage
    arr = [64, 34, 25, 12, 22, 11, 90]
    sorted_arr = merge_sort(arr)
    print("Original array:", arr)
    print("Sorted array:", sorted_arr)